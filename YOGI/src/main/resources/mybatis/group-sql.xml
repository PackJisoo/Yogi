<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC " - //mybatis.org//DTD Config 3.0//EN" " http://mybatis.org/dtd/mybatis-3-mapper.dtd">
     
<mapper namespace="group">
	<!-- 모임리스트 & 검색 -->
	<select id="group_select_all" resultType="hashmap" parameterType="hashmap">														  	
		select * from group_gathering	
		<where>		
			<if test="searchWord != null">
				(gg_name like '%' || #{searchWord} || '%'  or gg_detail like '%' || #{searchWord} || '%')
			</if>
			<if test="searchCategory != null">
				AND REGEXP_LIKE(gg_category,#{searchCategory})
			</if>
			<if test="searchAddr != null">
				AND REGEXP_LIKE(gg_addr,#{searchAddr})
			</if>
			<if test="searchMStart != null">
				AND REGEXP_LIKE(gg_date,#{searchMStart})
			</if>
			<if test="searchPay != null">
				<if test='searchPay.equals("유료")'> 
					<![CDATA[ AND gg_cost > 0  ]]>	
				</if>
				<if test='searchPay.equals("무료")'>
					<![CDATA[ AND gg_cost <= 0 ]]>
				</if>
			</if>
		</where>	
		ORDER BY gg_no DESC																	
	</select>


	<select id="selectGroupDetail" parameterType="hashmap" resultType="hashmap">
		SELECT 
			gg_no,
			gg_name,
			m_no,
			gg_category,
			gg_addr,
			gg_date,
			gg_place,
			gg_detail,
			gg_cost,
			gg_total,
			gg_enable,
			gg_ofn,
			gg_rfn,
			(gg_total - gg_enable) as gg_permit_pnum,
			m_name as wt_name
		FROM
			group_gathering natural join members
		WHERE
			gg_no=#{gg_no}
	</select>
	
	<!-- 찜 리스트 -->
	<select id="selectLikeitExist" parameterType="hashmap" resultType="hashmap">
		SELECT * FROM Likeit
		WHERE
			gg_no=#{gg_no} and m_no=#{m_no}
	</select>
	
	<!-- 찜하기 -->
	<insert id="insertLikeit" parameterType="hashmap">
		INSERT INTO likeit
		(
			li_no,
			gg_no,
			m_no
		) 
		VALUES
		(
			likeit_seq.nextval,
			#{gg_no},
			#{m_no}
		)
	</insert>
	
	<!-- 찜삭제 -->
	<delete id="deleteLikeit" parameterType="hashmap">
		DELETE FROM
			likeit
		WHERE
			gg_no=#{gg_no} and m_no=#{m_no}
	</delete>	
	
	<select id="selectGroupEnrollExist" parameterType="hashmap" resultType="hashmap">
		SELECT * FROM group_enroll
		WHERE
			gg_no=#{gg_no} and m_no=#{m_no}
	</select>
	
	<!-- 모임 신청 -->
	<insert id="insertGroupEnroll" parameterType="hashmap">
		INSERT INTO group_enroll
		VALUES
		(
			enroll_seq.nextval,
			#{gg_no},
			#{m_no}
		)
	</insert>
	
	<!-- 모임 취소 -->
	<delete id="deleteGroupEnroll" parameterType="hashmap">
		DELETE FROM
			group_enroll
		WHERE
			gg_no=#{gg_no} and m_no=#{m_no}
	</delete>
	
	<!-- 점수 주기 -->
	<update id="plusGrade" parameterType="hashmap">
		update members set m_grade=m_grade+1 where m_no=#{m_no}
	</update>
	
	<update id="minusGrade" parameterType="hashmap">
		update members set m_grade=m_grade-1 where m_no=#{m_no}
	</update>
	
	<!-- 신청 인원 더하기 -->
	<update id="plusCrp" parameterType="hashmap">
		update group_gathering set gg_enable=gg_enable+1 where gg_no=#{gg_no}
	</update>
	
	<update id="minusCrp" parameterType="hashmap">
		update group_gathering set gg_enable=gg_enable-1 where gg_no=#{gg_no}
	</update>
	
	<!-- 댓글 삽입 -->
    <insert id="insertCmt" parameterType="hashmap">
      INSERT INTO comments
      (
         c_no,
         c_content,
         c_date,
         gg_no,
         m_no,
         c_ref,
         c_re,
         c_lv,
         c_del
      )
      VALUES
      (
         comments_seq.nextval,
         #{c_content},
         sysdate,
         #{gg_no},
         #{m_no},
         comments_seq.currval,
         #{c_re},
         #{c_lv},
         'N'
      )
    </insert>
   
    <insert id="insertCmtRep" parameterType="hashmap">
      INSERT INTO comments
      (
         c_no,
         c_content,
         c_date,
         gg_no,
         m_no,
         c_ref,
         c_re,
         c_lv,
         c_del
      )
      VALUES
      (
         comments_seq.nextval,
         #{c_content},
         sysdate,
         #{gg_no},
         #{m_no},
         #{c_ref},
         #{c_re},
         #{c_lv},
         'N'
      )
    </insert>
   
   
    <select id="selectCmtList" parameterType="hashmap" resultType="hashmap">
      SELECT
         c_no,
         c_content,
         c_date,
         m_no,
         m_name as c_name
      FROM
         comments natural join members
      WHERE
         gg_no=#{gg_no}
      ORDER BY
         c_no DESC
    </select>


	<update id="updateReplyStep" parameterType="hashmap">
      UPDATE comments set c_re=c_re+1 where c_ref=#{c_ref} AND c_re>#{c_re}
    </update>
   
    <select id="groupEnrollList" parameterType="hashmap" resultType="hashmap">
      select ge_no,
            gg_no,
            m_no,
            m_name as ge_name
      from
         group_enroll natural join members
      where
         gg_no = #{gg_no}
    </select>
	
	
	<insert parameterType="GroupModel" id="insertGroup"> 
		INSERT INTO Group_Gathering ( 
			gg_no, 
			gg_name, 
			m_no, 
			gg_category, 
			gg_addr, 
			gg_date, 
			gg_place, 
			gg_detail, 
			gg_cost, 
			gg_total, 
			gg_enable, 
			gg_ofn, 
			gg_penalty, 
			gg_active, 
			gg_rfn) 
		VALUES ( 
			groupgathering_seq.nextval, 
			#{gg_name}, 
			#{m_no}, 
			#{gg_category}, 
			#{gg_addr}, 
			#{gg_date}, 
			#{gg_place}, 
			#{gg_detail}, 
			#{gg_cost}, 
			#{gg_total}, 
			#{gg_enable}, 
			#{gg_ofn}, 
			0, 
			0, 
			#{gg_rfn} 
			) 
	</insert>
	
	<update id="modifyGroup" parameterType="hashmap">
		UPDATE 
			group_gathering 
		SET 
			gg_addr=#{gg_addr},
			gg_place=#{gg_place},
			gg_detail=#{gg_detail},
			gg_ofn=#{gg_ofn},
			gg_rfn=#{gg_rfn}
		WHERE 
			gg_no=#{gg_no}
	</update>
	
	<update id="modifyGroupExceptFile" parameterType="hashmap">
		UPDATE 
			group_gathering 
		SET 
			gg_addr=#{gg_addr},
			gg_place=#{gg_place},
			gg_detail=#{gg_detail}
		WHERE 
			gg_no=#{gg_no}
	</update>
	
	<select id="selectFileName" resultType="String">
		SELECT
			gg_rfn
		FROM
			group_gathering
		WHERE
			gg_no=#{gg_no}
		
	</select>
	
	<update id="inactivateGroup" parameterType="hashmap">
		UPDATE 
			Group_Gathering
		SET
			gg_active=1
		WHERE
			gg_no=#{GG_NO}
	</update>
</mapper>